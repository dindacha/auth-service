# schema.graphql - Updated with Member Integration

type User {
  id: String!
  memberId: String          # Link to member service
  email: String!
  firstName: String!        # Split from member service name
  lastName: String!         # Split from member service name
  phone: String
  role: UserRole!
  isActive: Boolean!
  isVerified: Boolean!
  createdAt: String!
  borrowings: [Loan!]!      # From member service
}

# ðŸ†• NEW: Loan information from member service
type Loan {
  id: String!
  bookId: Int!
  tanggalPeminjaman: String
  tanggalJatuhTempo: String
  tanggalPengembalian: String
  status: String
  denda: Int
}

enum UserRole {
  ADMIN
  CUSTOMER
  MEMBER                    # Primary role for library members
  MERCHANT
  MODERATOR
}

type AuthResponse {
  accessToken: String!
  refresToken: String!
  expiresIn: Int!
  tokenType: String!
  user: User!
}

type ValidationResponse {
  valid: Boolean!
  userID: String
  email: String
  role: UserRole
}

type PermissionResponse {
  hasPermission: Boolean!
  userID: String!
}

# ðŸ†• NEW: Library member registration input
input RegisterLibraryMemberInput {
  name: String!
  phone: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

# Keep for backward compatibility
input RegisterAuthInput {
  userID: String!
  email: String!
  password: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

input ChangePasswordInput {
  userID: String!
  oldPassword: String!
  newPassword: String!
}

# ðŸ†• NEW: Update member info input
input UpdateMemberInput {
  email: String!
  name: String
  phone: String
}

type Query {
  validateToken(token: String!): ValidationResponse!
  checkPermission(token: String!, resource: String!, action: String!): PermissionResponse!
  getUserSessions(token: String!): [Session!]!
  getUserByEmail(email: String!): User                    # ðŸ†• NEW
  getUserWithBorrowings(email: String!): User             # ðŸ†• NEW
  health: HealthResponse!
}

type Mutation {
  login(input: LoginInput!): AuthResponse!
  refreshToken(input: RefreshTokenInput!): AuthResponse!
  logout(refreshToken: String!): GenericResponse!

  # Registration methods
  registerLibraryMember(input: RegisterLibraryMemberInput!): GenericResponse!  # ðŸ†• PRIMARY
  registerUserAuth(input: RegisterAuthInput!): GenericResponse!                # Keep for compatibility

  # Account management
  changePassword(input: ChangePasswordInput!): GenericResponse!
  updateMemberInfo(input: UpdateMemberInput!): GenericResponse!               # ðŸ†• NEW
  revokeSession(token: String!, sessionID: String!): GenericResponse!
}

type Session {
  id: String!
  tokenID: String!
  isActive: Boolean!
  expiresAt: String!
  createdAt: String!
  lastSeen: String!
  ipAddress: String!
  userAgent: String!
}

type GenericResponse {
  success: Boolean!
  message: String!
}

type HealthResponse {
  status: String!
  service: String!
  version: String!
}