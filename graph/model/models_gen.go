// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type AuthResponse struct {
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
	ExpiresIn    int    `json:"expiresIn"`
	TokenType    string `json:"tokenType"`
	User         *User  `json:"user"`
}

type ChangePasswordInput struct {
	UserID      string `json:"userID"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type GenericResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

type HealthResponse struct {
	Status  string `json:"status"`
	Service string `json:"service"`
	Version string `json:"version"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Mutation struct {
}

type PermissionResponse struct {
	HasPermission bool   `json:"hasPermission"`
	UserID        string `json:"userID"`
}

type Query struct {
}

type RefreshTokenInput struct {
	RefreshToken string `json:"refreshToken"`
}

type RegisterAuthInput struct {
	UserID   string `json:"userID"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Session struct {
	ID        string `json:"id"`
	TokenID   string `json:"tokenID"`
	IsActive  bool   `json:"isActive"`
	ExpiresAt string `json:"expiresAt"`
	CreatedAt string `json:"createdAt"`
	LastSeen  string `json:"lastSeen"`
	IPAddress string `json:"ipAddress"`
	UserAgent string `json:"userAgent"`
}

type User struct {
	ID         string   `json:"id"`
	Email      string   `json:"email"`
	FirstName  string   `json:"firstName"`
	LastName   string   `json:"lastName"`
	Phone      *string  `json:"phone,omitempty"`
	Role       UserRole `json:"role"`
	IsActive   bool     `json:"isActive"`
	IsVerified bool     `json:"isVerified"`
	CreatedAt  string   `json:"createdAt"`
}

type ValidationResponse struct {
	Valid  bool      `json:"valid"`
	UserID *string   `json:"userID,omitempty"`
	Email  *string   `json:"email,omitempty"`
	Role   *UserRole `json:"role,omitempty"`
}

type UserRole string

const (
	UserRoleAdmin     UserRole = "ADMIN"
	UserRoleCustomer  UserRole = "CUSTOMER"
	UserRoleMerchant  UserRole = "MERCHANT"
	UserRoleModerator UserRole = "MODERATOR"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleCustomer,
	UserRoleMerchant,
	UserRoleModerator,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleCustomer, UserRoleMerchant, UserRoleModerator:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
